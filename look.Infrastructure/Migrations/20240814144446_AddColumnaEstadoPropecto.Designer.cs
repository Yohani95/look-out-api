// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using look.Infrastructure.data;

#nullable disable

namespace look.Infrastructure.Migrations
{
    [DbContext(typeof(LookDbContext))]
    [Migration("20240814144446_AddColumnaEstadoPropecto")]
    partial class AddColumnaEstadoPropecto
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("look.domain.entities.Common.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Exception")
                        .HasColumnType("longtext")
                        .HasColumnName("exception");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("level");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<string>("SourceContext")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("source_context");

                    b.Property<DateTime?>("Timestamp")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.ToTable("logs", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.admin.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("car_id");

                    b.Property<int>("CarDescripcion")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("car_descripcion");

                    b.Property<int>("CarNombre")
                        .HasColumnType("int(11)")
                        .HasColumnName("car_nombre");

                    b.HasKey("CarId")
                        .HasName("PRIMARY");

                    b.ToTable("car", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.admin.Email", b =>
                {
                    b.Property<int>("EmaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ema_id");

                    b.Property<int?>("CliId")
                        .HasColumnType("int(11)")
                        .HasColumnName("cli_id");

                    b.Property<string>("EmaEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ema_email");

                    b.Property<int?>("EmaPrincipal")
                        .HasColumnType("int(11)")
                        .HasColumnName("ema_principal");

                    b.Property<sbyte?>("EmaVigente")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("ema_vigente");

                    b.Property<int?>("PerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("per_id");

                    b.Property<int?>("TemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tem_id");

                    b.HasKey("EmaId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CliId" }, "FK_Email_Cliente");

                    b.HasIndex(new[] { "PerId" }, "FK_Email_Persona");

                    b.HasIndex(new[] { "TemId" }, "FK_Email_Tipo_Email");

                    b.ToTable("email", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.admin.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Prf_Descripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prf_descripcion");

                    b.Property<string>("Prf_Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prf_nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("perfil", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.admin.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("PaiId")
                        .HasColumnType("int(11)")
                        .HasColumnName("pai_id");

                    b.Property<string>("PerApellidoMaterno")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("per_apellido_materno");

                    b.Property<string>("PerApellidoPaterno")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("per_apellido_paterno");

                    b.Property<DateTime?>("PerFechaNacimiento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("per_fecha_nacimiento");

                    b.Property<string>("PerIdNacional")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("per_id_nacional");

                    b.Property<string>("PerNombres")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("per_nombres");

                    b.Property<int?>("TpeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tpe_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TpeId" }, "FK_Persona_Tipo_Persona");

                    b.ToTable("persona", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.admin.ProyectoParticipante", b =>
                {
                    b.Property<int>("PpaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ppa_id");

                    b.Property<int?>("CarId")
                        .HasColumnType("int(11)")
                        .HasColumnName("car_id");

                    b.Property<DateTime?>("FechaAsignacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_asignacion");

                    b.Property<DateTime?>("FechaTermino")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_termino");

                    b.Property<int?>("PerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("per_id");

                    b.Property<double?>("PerTarifa")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("per_tarifa");

                    b.Property<int>("PrfId")
                        .HasColumnType("int(11)")
                        .HasColumnName("prf_id");

                    b.Property<int?>("PryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("pry_id");

                    b.Property<int?>("TarifarioId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tarifario_id");

                    b.Property<int?>("estado")
                        .HasColumnType("int(11)")
                        .HasColumnName("estado");

                    b.HasKey("PpaId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CarId" }, "FK_Proyecto_Participantes_Car");

                    b.HasIndex(new[] { "PerId" }, "FK_Proyecto_Participantes_Persona");

                    b.HasIndex(new[] { "PryId" }, "FK_Proyecto_Participantes_Proyecto");

                    b.HasIndex(new[] { "PrfId" }, "FK_Proyecto_participantes_Perfil");

                    b.HasIndex(new[] { "TarifarioId" }, "FK_Proyecto_participantes_Tarifario");

                    b.ToTable("proyecto_participantes", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.admin.Rol", b =>
                {
                    b.Property<int>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("rol_id");

                    b.Property<string>("RolDescripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rol_descripcion");

                    b.Property<string>("RolNombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rol_nombre");

                    b.HasKey("RolId")
                        .HasName("PRIMARY");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.admin.Telefono", b =>
                {
                    b.Property<int>("telId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("tel_id");

                    b.Property<int?>("TelPrincipal")
                        .HasColumnType("int(11)")
                        .HasColumnName("tel_principal");

                    b.Property<int?>("cliId")
                        .HasColumnType("int(11)")
                        .HasColumnName("cli_id");

                    b.Property<int?>("perId")
                        .HasColumnType("int(11)")
                        .HasColumnName("per_id");

                    b.Property<string>("telNumero")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tel_numero");

                    b.Property<sbyte?>("telVigente")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("tel_vigente");

                    b.Property<int?>("tteId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tte_id");

                    b.HasKey("telId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "cliId" }, "FK_Telefono_Cliente");

                    b.HasIndex(new[] { "perId" }, "FK_Telefono_Persona");

                    b.HasIndex(new[] { "tteId" }, "FK_Telefono_Tipo_Telefono");

                    b.ToTable("telefono", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.admin.TipoEmail", b =>
                {
                    b.Property<int>("temId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tem_id");

                    b.Property<string>("temNombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tem_nombre");

                    b.Property<sbyte?>("temVigente")
                        .HasColumnType("tinyint")
                        .HasColumnName("tem_vigente");

                    b.HasKey("temId")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_email", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.admin.TipoPersona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("TpeDescripcion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("tpe_descripcion")
                        .IsFixedLength()
                        .UseCollation("utf8_general_ci");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_persona", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.admin.TipoTelefono", b =>
                {
                    b.Property<int>("tteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tte_id");

                    b.Property<string>("tteNombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tte_nombre");

                    b.Property<sbyte?>("tteVigente")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("tte_vigente");

                    b.HasKey("tteId")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_telefono", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.admin.Usuario", b =>
                {
                    b.Property<int>("UsuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("usu_id");

                    b.Property<int?>("PerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("per_id");

                    b.Property<int?>("PrfId")
                        .HasColumnType("int(11)")
                        .HasColumnName("prf_id");

                    b.Property<int?>("RolId")
                        .HasColumnType("int(11)")
                        .HasColumnName("rol_id");

                    b.Property<string>("UsuContraseña")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("usu_contraseña");

                    b.Property<string>("UsuNombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("usu_nombre");

                    b.Property<sbyte?>("UsuVigente")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("usu_vigente");

                    b.HasKey("UsuId")
                        .HasName("PRIMARY");

                    b.HasIndex("PrfId");

                    b.HasIndex(new[] { "PerId" }, "FK_Usuario_Persona");

                    b.HasIndex(new[] { "RolId" }, "FK_Usuario_Rol");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.cuentas.Cliente", b =>
                {
                    b.Property<int>("CliId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("cli_id");

                    b.Property<string>("CliDescripcion")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cli_descripcion");

                    b.Property<string>("CliNif")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cli_nif");

                    b.Property<string>("CliNombre")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cli_nombre");

                    b.Property<string>("CliSitioWeb")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cli_sitio_web");

                    b.Property<int?>("EclId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ecl_id");

                    b.Property<int?>("GirId")
                        .HasColumnType("int(11)")
                        .HasColumnName("gir_id");

                    b.Property<int>("PaiId")
                        .HasColumnType("int(11)")
                        .HasColumnName("pai_id");

                    b.Property<int?>("SecId")
                        .HasColumnType("int(11)")
                        .HasColumnName("sec_id");

                    b.HasKey("CliId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GirId" }, "FK_Cliente_Giro");

                    b.HasIndex(new[] { "SecId" }, "FK_Cliente_Sector_Comercial");

                    b.HasIndex(new[] { "PaiId" }, "FK_Cliente_pais_id");

                    b.HasIndex(new[] { "EclId" }, "FK_ecl_cl");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.cuentas.ClientePersona", b =>
                {
                    b.Property<int>("MyRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("CarId")
                        .HasColumnType("int(11)")
                        .HasColumnName("car_id");

                    b.Property<int?>("CliId")
                        .HasColumnType("int(11)")
                        .HasColumnName("cli_id");

                    b.Property<sbyte?>("CliVigente")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("cli_vigente");

                    b.Property<int?>("PerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("per_id");

                    b.HasKey("MyRowId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CarId" }, "FK_cliente_persona_Car");

                    b.HasIndex(new[] { "CliId" }, "FK_cliente_persona_Cliente");

                    b.HasIndex(new[] { "PerId" }, "FK_cliente_persona_Persona");

                    b.ToTable("cliente_persona", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.cuentas.EstadoCliente", b =>
                {
                    b.Property<int>("EclId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ecl_id");

                    b.Property<string>("EclNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ecl_nombre");

                    b.HasKey("EclId")
                        .HasName("PRIMARY");

                    b.ToTable("estado_cliente", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.cuentas.Giro", b =>
                {
                    b.Property<int>("GirId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("gir_id");

                    b.Property<string>("GirDescripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("gir_descripcion");

                    b.Property<string>("GirNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("gir_nombre");

                    b.Property<sbyte?>("GirVigente")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("gir_vigente");

                    b.HasKey("GirId")
                        .HasName("PRIMARY");

                    b.ToTable("giro", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.cuentas.SectorComercial", b =>
                {
                    b.Property<int>("SecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("sec_id");

                    b.Property<string>("SecDescripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sec_descripcion");

                    b.Property<string>("SecNombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sec_nombre");

                    b.Property<sbyte?>("SecVigente")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("sec_vigente");

                    b.HasKey("SecId")
                        .HasName("PRIMARY");

                    b.ToTable("sector_comercial", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.factura.DiaPagos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Dia")
                        .HasColumnType("int(11)")
                        .HasColumnName("dia");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("dia_pago", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.factura.DocumentosFactura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("ContenidoDocumento")
                        .HasColumnType("LONGBLOB")
                        .HasColumnName("contenido_documento");

                    b.Property<int>("IdFactura")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_factura");

                    b.Property<int?>("IdtipoMoneda")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_tipo_moneda");

                    b.Property<double?>("Monto")
                        .HasColumnType("double")
                        .HasColumnName("monto");

                    b.Property<string>("NombreDocumento")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre_documento");

                    b.Property<int?>("idTipoDocumento")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_tipo_documento");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdFactura" }, "FK_documentos_factura_factura_periodo");

                    b.ToTable("documentos_factura", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.factura.EstadoFacturaPeriodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("estado_factura_periodo", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.factura.FacturaAdaptacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    b.Property<int?>("IdHorasUtilizadas")
                        .HasColumnType("int")
                        .HasColumnName("id_horas_utilizadas");

                    b.Property<int?>("IdLicencia")
                        .HasColumnType("int")
                        .HasColumnName("id_licencia");

                    b.Property<int?>("IdPeriodoProyecto")
                        .HasColumnType("int")
                        .HasColumnName("id_periodo_proyecto");

                    b.Property<int?>("IdSoporte")
                        .HasColumnType("int")
                        .HasColumnName("id_soporte");

                    b.Property<double?>("Monto")
                        .HasColumnType("double")
                        .HasColumnName("monto");

                    b.Property<double?>("MontoDiferencia")
                        .HasColumnType("double")
                        .HasColumnName("monto_diferencia");

                    b.Property<bool?>("Solicitada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("solicitada");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCliente" }, "FK_factura_adaptacion_cliente");

                    b.HasIndex(new[] { "IdHorasUtilizadas" }, "FK_factura_adaptacion_horas_utilizadas");

                    b.HasIndex(new[] { "IdLicencia" }, "FK_factura_adaptacion_licencia");

                    b.HasIndex(new[] { "IdPeriodoProyecto" }, "FK_factura_adaptacion_periodo_proyecto");

                    b.HasIndex(new[] { "IdSoporte" }, "FK_factura_adaptacion_soporte");

                    b.ToTable("factura_adaptacion", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.factura.FacturaPeriodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("FechaFactura")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_factura");

                    b.Property<DateTime?>("FechaHes")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_hes");

                    b.Property<DateTime?>("FechaOc")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_oc");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_vencimiento");

                    b.Property<string>("HesCodigo")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("hes_codigo");

                    b.Property<int?>("IdEstado")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_estado");

                    b.Property<int?>("IdHorasUtilizadas")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_horas_utilizadas");

                    b.Property<int?>("IdPeriodo")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_periodo");

                    b.Property<int?>("IdSoporteBolsa")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_soporte_bolsa");

                    b.Property<double?>("Monto")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("monto");

                    b.Property<string>("Observaciones")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("observaciones");

                    b.Property<string>("OcCodigo")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("oc_codigo");

                    b.Property<int?>("OrdenPeriodo")
                        .HasColumnType("int(11)")
                        .HasColumnName("orden_periodo");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("varchar(120)")
                        .HasColumnName("razon_social");

                    b.Property<string>("Rut")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rut");

                    b.Property<int?>("idLicencia")
                        .HasColumnType("int")
                        .HasColumnName("id_licencia");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "idLicencia" }, "FK_factura_Licencia");

                    b.HasIndex(new[] { "IdEstado" }, "FK_factura_periodo_estado");

                    b.HasIndex(new[] { "IdHorasUtilizadas" }, "FK_factura_periodo_horas_utilizadas");

                    b.HasIndex(new[] { "IdPeriodo" }, "FK_factura_periodo_periodo");

                    b.HasIndex(new[] { "IdSoporteBolsa" }, "FK_factura_soporte");

                    b.ToTable("factura_periodo", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.factura.TipoFacturacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_facturacion", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.licencia.EstadoVentaLicencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("estado_venta_licencia", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.licencia.MarcaLicencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("marca_licencia", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.licencia.MarcaLicenciaContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdContacto")
                        .HasColumnType("int")
                        .HasColumnName("idContacto");

                    b.Property<int>("IdMarca")
                        .HasColumnType("int")
                        .HasColumnName("idMarco");

                    b.Property<int?>("MarcaLicenciaId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("MarcaLicenciaId");

                    b.HasIndex(new[] { "IdMarca" }, "FK_marca_licencia_contacto_marca");

                    b.HasIndex(new[] { "IdContacto" }, "FK_marca_licencia_contacto_persona");

                    b.ToTable("marca_licencia_contacto", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.licencia.MayoristaLicencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("estado")
                        .HasComment("vigencia de mayorista");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telefono");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("mayorista_licencia", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.licencia.MayoristaLicenciaContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdContacto")
                        .HasColumnType("int")
                        .HasColumnName("id_contacto");

                    b.Property<int>("IdMayorista")
                        .HasColumnType("int")
                        .HasColumnName("id_mayorista");

                    b.Property<int?>("MayoristaLicenciaId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("MayoristaLicenciaId");

                    b.HasIndex(new[] { "IdMayorista" }, "FK_mayorista_licencia_contacto_mayorista");

                    b.HasIndex(new[] { "IdContacto" }, "FK_mayorista_licencia_contacto_persona");

                    b.ToTable("mayorista_licencia_contacto", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.licencia.TarifarioVentaLicencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("FechaTermino")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_termino");

                    b.Property<DateTime>("FechaVigencia")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_vigencia");

                    b.Property<int>("IdLicencia")
                        .HasColumnType("int")
                        .HasColumnName("id_licencia");

                    b.Property<int>("IdMarcaLicencia")
                        .HasColumnType("int")
                        .HasColumnName("id_marca_licencia");

                    b.Property<int>("IdMayoristaLicencia")
                        .HasColumnType("int")
                        .HasColumnName("id_mayorista_licencia");

                    b.Property<int?>("IdVentaLicencia")
                        .HasColumnType("int")
                        .HasColumnName("id_venta_licencia");

                    b.Property<double>("Valor")
                        .HasColumnType("double")
                        .HasColumnName("valor");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdLicencia" }, "FK_licencia_tarifario");

                    b.HasIndex(new[] { "IdMarcaLicencia" }, "FK_marca_licencia");

                    b.HasIndex(new[] { "IdMayoristaLicencia" }, "FK_mayorista_licencia");

                    b.ToTable("tarifario_venta_licencia", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.licencia.VentaLicencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("Descuento")
                        .HasColumnType("int(11)")
                        .HasColumnName("descuento");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_cierre");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("FechaRenovacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_renovacion");

                    b.Property<int?>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    b.Property<int?>("IdContacto")
                        .HasColumnType("int")
                        .HasColumnName("id_contacto");

                    b.Property<int?>("IdDiaPago")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_dia_pago");

                    b.Property<int?>("IdEmpresaPrestadora")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_empresa_prestadora");

                    b.Property<int?>("IdEstado")
                        .HasColumnType("int")
                        .HasColumnName("id_estado");

                    b.Property<int?>("IdKam")
                        .HasColumnType("int")
                        .HasColumnName("id_kam");

                    b.Property<int?>("IdMoneda")
                        .HasColumnType("int")
                        .HasColumnName("id_moneda");

                    b.Property<int?>("IdPais")
                        .HasColumnType("int")
                        .HasColumnName("id_pais");

                    b.Property<int?>("IdTipoFacturacion")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_facturacion");

                    b.Property<double?>("Monto")
                        .HasColumnType("double")
                        .HasColumnName("monto");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<int?>("idTipoLicencia")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_licencia");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEmpresaPrestadora" }, "FK_oportunidad_Empresa_Prestadora");

                    b.HasIndex(new[] { "IdDiaPago" }, "FK_venta_licencia_Dia_Pago");

                    b.HasIndex(new[] { "IdCliente" }, "FK_venta_licencia_cliente");

                    b.HasIndex(new[] { "IdEstado" }, "FK_venta_licencia_estado");

                    b.HasIndex(new[] { "IdKam" }, "FK_venta_licencia_kam");

                    b.HasIndex(new[] { "IdMoneda" }, "FK_venta_licencia_moneda");

                    b.HasIndex(new[] { "IdPais" }, "FK_venta_licencia_pais");

                    b.HasIndex(new[] { "IdTipoFacturacion" }, "FK_venta_licencia_tipo_facturacion");

                    b.ToTable("venta_licencia", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.oportunidad.AreaServicioOportunidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("area_servicio_oportunidad", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.oportunidad.DocumentoOportunidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("ContenidoDocumento")
                        .HasColumnType("LONGBLOB")
                        .HasColumnName("contenido_documento");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("IdOportunidad")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_oportunidad");

                    b.Property<string>("NombreDocumento")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre_documento");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdOportunidad" }, "FK_documento_oportunidad");

                    b.ToTable("documento_oportunidad", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.oportunidad.EstadoOportunidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("estado_oportunidad", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.oportunidad.LicitacionOportunidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("licitacion_oportunidad", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.oportunidad.NovedadOportunidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha");

                    b.Property<int>("IdOportunidad")
                        .HasColumnType("int")
                        .HasColumnName("id_oportunidad");

                    b.Property<string>("Nombre")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("novedad_oportunidad", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.oportunidad.Oportunidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_cierre");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("FechaRenovacion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_renovacion");

                    b.Property<int?>("IdAreaServicio")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_area_servicio");

                    b.Property<int?>("IdCliente")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_cuenta");

                    b.Property<int?>("IdContacto")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_contacto");

                    b.Property<int?>("IdEmpresaPrestadora")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_empresa_prestadora");

                    b.Property<int?>("IdEstadoOportunidad")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_estado_oportunidad");

                    b.Property<int?>("IdKam")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_kam");

                    b.Property<int?>("IdLicitacion")
                        .HasColumnType("int")
                        .HasColumnName("id_licitacion");

                    b.Property<int?>("IdMoneda")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_moneda");

                    b.Property<int?>("IdOrigen")
                        .HasColumnType("int")
                        .HasColumnName("id_origen");

                    b.Property<int?>("IdPais")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_pais");

                    b.Property<int?>("IdTipoCerrada")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_cerrada");

                    b.Property<int?>("IdTipoLicencia")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_licencia");

                    b.Property<int?>("IdTipoOportunidad")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_tipo_oportunidad");

                    b.Property<double?>("Monto")
                        .HasColumnType("double")
                        .HasColumnName("monto");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<bool?>("Renovable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("renovable");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdTipoCerrada" }, "FK_cerrada_oportunidad");

                    b.HasIndex(new[] { "IdLicitacion" }, "FK_licitacion_oportunidad");

                    b.HasIndex(new[] { "IdEmpresaPrestadora" }, "FK_oportunidad_Empresa_Prestadora")
                        .HasDatabaseName("FK_oportunidad_Empresa_Prestadora1");

                    b.HasIndex(new[] { "IdEstadoOportunidad" }, "FK_oportunidad_Estado_oportunidad");

                    b.HasIndex(new[] { "IdMoneda" }, "FK_oportunidad_Moneda");

                    b.HasIndex(new[] { "IdPais" }, "FK_oportunidad_Pais");

                    b.HasIndex(new[] { "IdAreaServicio" }, "FK_oportunidad_area_servicio");

                    b.HasIndex(new[] { "IdCliente" }, "FK_oportunidad_cliente");

                    b.HasIndex(new[] { "IdKam" }, "FK_oportunidad_persona_kam");

                    b.HasIndex(new[] { "IdTipoOportunidad" }, "FK_oportunidad_tipo_oportunidad");

                    b.HasIndex(new[] { "IdOrigen" }, "FK_origen_oportunidad");

                    b.HasIndex(new[] { "IdTipoLicencia" }, "FK_tipo_licitacion_oportunidad");

                    b.ToTable("oportunidad", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.oportunidad.OrigenOportunidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("origen_oportunidad", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.oportunidad.TipoCerradaOportunidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_cerrada_oportunidad", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.oportunidad.TipoLicenciaOportunidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_licencia_oportunidad", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.oportunidad.TipoOportunidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_oportunidad", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.prospecto.ContactoProspecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("longtext");

                    b.Property<string>("Numero")
                        .HasColumnType("longtext");

                    b.Property<string>("PerfilLinkedin")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ContactosProspecto");
                });

            modelBuilder.Entity("look.domain.entities.prospecto.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Detalle")
                        .HasColumnType("longtext");

                    b.Property<int?>("IdIndustria")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("IdIndustria");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("look.domain.entities.prospecto.EstadoProspecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EstadoProspecto");
                });

            modelBuilder.Entity("look.domain.entities.prospecto.Industria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Detalle")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Industrias");
                });

            modelBuilder.Entity("look.domain.entities.prospecto.Prospecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("CantidadLlamadas")
                        .HasColumnType("int");

                    b.Property<bool?>("Contactado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaActividad")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("fecha_actividad")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("IdContactoProspecto")
                        .HasColumnType("int");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("IdKam")
                        .HasColumnType("int(11)");

                    b.Property<bool?>("Responde")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("idEstadoProspecto")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("IdContactoProspecto");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdKam");

                    b.HasIndex("idEstadoProspecto");

                    b.ToTable("prospecto", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.Documento", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("doc_id");

                    b.Property<string>("DocExtencion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("doc_extencion");

                    b.Property<int?>("DocIdCliente")
                        .HasColumnType("int(11)")
                        .HasColumnName("doc_id_cliente");

                    b.Property<string>("DocNombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("doc_nombre");

                    b.Property<string>("DocUrl")
                        .HasMaxLength(190)
                        .HasColumnType("varchar(190)")
                        .HasColumnName("doc_url");

                    b.Property<int?>("TdoId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tdo_id");

                    b.HasKey("DocId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DocIdCliente" }, "FK_Documento_Cliente");

                    b.HasIndex(new[] { "TdoId" }, "FK_Documento_Tipo_Documento");

                    b.ToTable("documento", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.EmpresaPrestadora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Decripcion")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("empresa_prestador", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.EstadoPropuesta", b =>
                {
                    b.Property<int>("EppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("epp_id");

                    b.Property<string>("EppDescripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("epp_descripcion");

                    b.HasKey("EppId")
                        .HasName("PRIMARY");

                    b.ToTable("estado_propuesta", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.EstadoProyecto", b =>
                {
                    b.Property<int>("EpyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("epy_id");

                    b.Property<string>("EpyDescripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("epy_descripcion");

                    b.Property<string>("EpyNombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("epy_nombre");

                    b.HasKey("EpyId")
                        .HasName("PRIMARY");

                    b.ToTable("estado_proyecto", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.Novedades", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("IdPerfil")
                        .HasColumnType("int(11)")
                        .HasColumnName("idperfil");

                    b.Property<int?>("IdTipoNovedad")
                        .HasColumnType("int(11)")
                        .HasColumnName("idTipoNovedad");

                    b.Property<DateTime?>("fechaHasta")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaHasta");

                    b.Property<DateTime?>("fechaInicio")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaInicio");

                    b.Property<int?>("idPersona")
                        .HasColumnType("int(11)")
                        .HasColumnName("idPersona");

                    b.Property<int?>("idProyecto")
                        .HasColumnType("int(11)")
                        .HasColumnName("idProyecto");

                    b.Property<string>("observaciones")
                        .HasColumnType("text")
                        .HasColumnName("observaciones");

                    b.HasKey("id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPerfil" }, "FK_proyecto_perfil");

                    b.HasIndex(new[] { "idPersona" }, "FK_proyecto_persona");

                    b.HasIndex(new[] { "idProyecto" }, "FK_proyecto_proyecto");

                    b.HasIndex(new[] { "IdTipoNovedad" }, "FK_proyecto_tipo_novedad");

                    b.ToTable("novedades", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.PeriodoProfesionales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("DiasAusentes")
                        .HasColumnType("int(11)")
                        .HasColumnName("dias_ausentes");

                    b.Property<int?>("DiasFeriados")
                        .HasColumnType("int(11)")
                        .HasColumnName("dias_feriados");

                    b.Property<int?>("DiasLicencia")
                        .HasColumnType("int(11)")
                        .HasColumnName("dias_licencia");

                    b.Property<int?>("DiasTrabajados")
                        .HasColumnType("int(11)")
                        .HasColumnName("dias_trabajados");

                    b.Property<int?>("DiasVacaciones")
                        .HasColumnType("int(11)")
                        .HasColumnName("dias_vacaciones");

                    b.Property<int?>("IdParticipante")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_participante");

                    b.Property<int?>("IdPeriodo")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_periodo");

                    b.Property<double?>("MontoDiario")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("monto_diario");

                    b.Property<double?>("MontoTotalPagado")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("monto_total_pagado");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPeriodo" }, "FK_periodo_profesionales_periodo");

                    b.HasIndex(new[] { "IdParticipante" }, "FK_periodo_profesionales_proyecto_partipante");

                    b.ToTable("periodos_profesionales", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.PeriodoProyecto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("DiasTotal")
                        .HasColumnType("int(11)")
                        .HasColumnName("dias_total");

                    b.Property<DateTime?>("FechaPeriodoDesde")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_periodo_desde");

                    b.Property<DateTime?>("FechaPeriodoHasta")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_periodo_hasta");

                    b.Property<double?>("Monto")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("monto");

                    b.Property<int?>("NumeroProfesionales")
                        .HasColumnType("int(11)")
                        .HasColumnName("numero_profesionales");

                    b.Property<int?>("PryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_proyecto");

                    b.Property<int?>("estado")
                        .HasColumnType("int(11)")
                        .HasColumnName("estado");

                    b.HasKey("id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PryId" }, "fk_periodos_proyecto_proyecto");

                    b.ToTable("periodos_proyecto", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.Propuesta", b =>
                {
                    b.Property<int>("PrpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("prp_id");

                    b.Property<int?>("EppId")
                        .HasColumnType("int(11)")
                        .HasColumnName("epp_id");

                    b.Property<int?>("MonId")
                        .HasColumnType("int(11)")
                        .HasColumnName("mon_id");

                    b.Property<string>("PrpDescripcion")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prp_descripcion");

                    b.Property<decimal?>("PrpPresupuesto")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("prp_presupuesto");

                    b.Property<int?>("PrsId")
                        .HasColumnType("int(11)")
                        .HasColumnName("prs_id");

                    b.Property<int?>("TseId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tse_id");

                    b.HasKey("PrpId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EppId" }, "FK_Propuesta_Estado_Propuesta");

                    b.HasIndex(new[] { "MonId" }, "FK_Propuesta_Moneda");

                    b.HasIndex(new[] { "PrsId" }, "FK_Propuesta_Prospecto");

                    b.HasIndex(new[] { "TseId" }, "FK_Propuesta_Tipo_Servicio");

                    b.ToTable("propuesta", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.Proyecto", b =>
                {
                    b.Property<int>("PryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("pry_id");

                    b.Property<int?>("EpyId")
                        .HasColumnType("int(11)")
                        .HasColumnName("epy_id");

                    b.Property<sbyte?>("FacturacionDiaHabil")
                        .HasColumnType("tinyint(2)")
                        .HasColumnName("facturacion_dia_habil");

                    b.Property<int?>("FechaCorte")
                        .HasColumnType("int")
                        .HasColumnName("fecha_corte");

                    b.Property<int?>("IdDiaPago")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_dia_pago");

                    b.Property<int?>("MonId")
                        .HasColumnType("int(11)")
                        .HasColumnName("mon_id");

                    b.Property<int?>("PaisId")
                        .HasColumnType("int(11)")
                        .HasColumnName("pai_id");

                    b.Property<int?>("PrpId")
                        .HasColumnType("int(11)")
                        .HasColumnName("prp_id");

                    b.Property<DateTime?>("PryFechaCierre")
                        .HasColumnType("datetime")
                        .HasColumnName("pry_fecha_cierre");

                    b.Property<DateTime?>("PryFechaCierreEstimada")
                        .HasColumnType("datetime")
                        .HasColumnName("pry_fecha_cierre_estimada");

                    b.Property<DateTime?>("PryFechaInicioEstimada")
                        .HasColumnType("datetime")
                        .HasColumnName("pry_fecha_inicio_estimada");

                    b.Property<int>("PryIdCliente")
                        .HasColumnType("int(11)")
                        .HasColumnName("pry_id_cliente");

                    b.Property<int?>("PryIdContacto")
                        .HasColumnType("int(11)")
                        .HasColumnName("pry_id_contacto");

                    b.Property<string>("PryNombre")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pry_nombre");

                    b.Property<decimal?>("PryValor")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("pry_valor");

                    b.Property<int?>("TseId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tse_id");

                    b.Property<int?>("idEmpresaPrestadora")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_empresa_prestadora");

                    b.Property<int?>("idTipoFacturacion")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_tipo_factura");

                    b.Property<int?>("kamId")
                        .HasColumnType("int(11)")
                        .HasColumnName("pry_kamId");

                    b.HasKey("PryId")
                        .HasName("PRIMARY");

                    b.HasIndex("IdDiaPago");

                    b.HasIndex(new[] { "PryIdCliente" }, "FK_Proyecto_Cliente");

                    b.HasIndex(new[] { "PaisId" }, "FK_Proyecto_Dia_Pago");

                    b.HasIndex(new[] { "idEmpresaPrestadora" }, "FK_Proyecto_Empresa_Prestadora");

                    b.HasIndex(new[] { "EpyId" }, "FK_Proyecto_Estado_Proyecto");

                    b.HasIndex(new[] { "MonId" }, "FK_Proyecto_Moneda");

                    b.HasIndex(new[] { "PaisId" }, "FK_Proyecto_Pais");

                    b.HasIndex(new[] { "PrpId" }, "FK_Proyecto_Propuesta");

                    b.HasIndex(new[] { "TseId" }, "FK_Proyecto_Tipo_Servicio");

                    b.ToTable("proyecto", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.ProyectoDocumento", b =>
                {
                    b.Property<int>("PydId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("pyd_id");

                    b.Property<int>("DocId")
                        .HasColumnType("int(11)")
                        .HasColumnName("doc_id");

                    b.Property<int>("PryId")
                        .HasColumnType("int(11)")
                        .HasColumnName("pry_id");

                    b.Property<int>("TdoId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tdo_id");

                    b.HasKey("PydId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DocId" }, "FK_Proyecto_Documento_Documento");

                    b.HasIndex(new[] { "PryId" }, "FK_Proyecto_Documento_Proyecto");

                    b.HasIndex(new[] { "TdoId" }, "FK_Proyecto_Documento_Tipo_Documento");

                    b.ToTable("proyecto_documento", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.TarifarioConvenio", b =>
                {
                    b.Property<int>("TcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("tc_id");

                    b.Property<string>("ComentariosGrales")
                        .HasColumnType("varchar(1000")
                        .HasColumnName("comentarios_grales");

                    b.Property<int?>("PRpId")
                        .HasColumnType("int(11)")
                        .HasColumnName("prp_id");

                    b.Property<int?>("TcBase")
                        .HasColumnType("int(11)")
                        .HasColumnName("tc_base");

                    b.Property<DateTime?>("TcInicioVigencia")
                        .HasColumnType("datetime")
                        .HasColumnName("tc_inicio_vigencia");

                    b.Property<int>("TcMoneda")
                        .HasColumnType("int(11)")
                        .HasColumnName("tc_moneda");

                    b.Property<int?>("TcPerfilAsignado")
                        .HasColumnType("int(11)")
                        .HasColumnName("tc_perfil_asignado");

                    b.Property<int?>("TcStatus")
                        .HasColumnType("int(11)")
                        .HasColumnName("tc_status");

                    b.Property<double?>("TcTarifa")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("tc_tarifa");

                    b.Property<DateTime?>("TcTerminoVigencia")
                        .HasColumnType("datetime")
                        .HasColumnName("tc_termino_vigencia");

                    b.HasKey("TcId")
                        .HasName("PRIMARY");

                    b.HasIndex("PRpId");

                    b.HasIndex("TcMoneda");

                    b.HasIndex("TcPerfilAsignado");

                    b.ToTable("tarifario_convenido", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.TipoDocumento", b =>
                {
                    b.Property<int>("TdoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("tdo_id");

                    b.Property<string>("TdoDescripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tdo_descripcion");

                    b.Property<string>("TdoNombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tdo_nombre");

                    b.HasKey("TdoId")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_documento", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.TipoNovedades", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<sbyte?>("Descuento")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("descuento");

                    b.Property<string>("descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_novedad", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.proyecto.TipoServicio", b =>
                {
                    b.Property<int>("TseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("tse_id");

                    b.Property<string>("TseDescripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tse_descripcion");

                    b.Property<string>("TseNombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tse_nombre");

                    b.Property<sbyte?>("TseVigente")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("tse_vigente");

                    b.HasKey("TseId")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_servicio", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.soporte.DocumentosSoporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("ContenidoDocumento")
                        .HasColumnType("LONGBLOB")
                        .HasColumnName("contenido_documento");

                    b.Property<int>("IdSoporte")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_soporte");

                    b.Property<string>("NombreDocumento")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre_documento");

                    b.Property<int?>("idTipoDocumento")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_tipo_documento");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdSoporte" }, "FK_documentos_soporte");

                    b.ToTable("documentos_soporte", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.soporte.HorasUtilizadas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("ContenidoDocumento")
                        .HasColumnType("longblob")
                        .HasColumnName("contenido_documento");

                    b.Property<sbyte?>("Estado")
                        .HasColumnType("tinyint(2)")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaPeriodoDesde")
                        .HasColumnType("date")
                        .HasColumnName("fecha_periodo_desde");

                    b.Property<DateTime?>("FechaPeriodoHasta")
                        .HasColumnType("date")
                        .HasColumnName("fecha_periodo_hasta");

                    b.Property<int?>("Horas")
                        .HasColumnType("int")
                        .HasColumnName("horas");

                    b.Property<int?>("HorasAcumuladas")
                        .HasColumnType("int(11)")
                        .HasColumnName("horas_acumuladas");

                    b.Property<int?>("HorasExtras")
                        .HasColumnType("int(11)")
                        .HasColumnName("horas_extras");

                    b.Property<int?>("IdSoporte")
                        .HasColumnType("int")
                        .HasColumnName("id_soporte");

                    b.Property<double?>("Monto")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("monto");

                    b.Property<double?>("MontoHorasExtras")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("monto_horas_extras");

                    b.Property<string>("NombreDocumento")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre_documento");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("IdSoporte");

                    b.ToTable("horas_utilizadas", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.soporte.Soporte", b =>
                {
                    b.Property<int>("PryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("pry_id");

                    b.Property<bool?>("AcumularHoras")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("acumular_horas");

                    b.Property<int?>("EpyId")
                        .HasColumnType("int(11)")
                        .HasColumnName("epy_id");

                    b.Property<sbyte?>("FacturacionDiaHabil")
                        .HasColumnType("tinyint(2)")
                        .HasColumnName("facturacion_dia_habil");

                    b.Property<int?>("FechaCorte")
                        .HasColumnType("int")
                        .HasColumnName("fecha_corte");

                    b.Property<int?>("IdDiaPago")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_dia_pago");

                    b.Property<int?>("IdTipoSoporte")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_soporte");

                    b.Property<int?>("MonId")
                        .HasColumnType("int(11)")
                        .HasColumnName("mon_id");

                    b.Property<int?>("NumeroHoras")
                        .HasColumnType("int")
                        .HasColumnName("numero_horas");

                    b.Property<int?>("PaisId")
                        .HasColumnType("int(11)")
                        .HasColumnName("pai_id");

                    b.Property<int?>("PrpId")
                        .HasColumnType("int(11)")
                        .HasColumnName("prp_id");

                    b.Property<DateTime?>("PryFechaCierre")
                        .HasColumnType("datetime")
                        .HasColumnName("pry_fecha_cierre");

                    b.Property<DateTime?>("PryFechaCierreEstimada")
                        .HasColumnType("datetime")
                        .HasColumnName("pry_fecha_cierre_estimada");

                    b.Property<DateTime?>("PryFechaInicioEstimada")
                        .HasColumnType("datetime")
                        .HasColumnName("pry_fecha_inicio_estimada");

                    b.Property<int>("PryIdCliente")
                        .HasColumnType("int(11)")
                        .HasColumnName("pry_id_cliente");

                    b.Property<int?>("PryIdContacto")
                        .HasColumnType("int(11)")
                        .HasColumnName("pry_id_contacto");

                    b.Property<string>("PryNombre")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pry_nombre");

                    b.Property<decimal?>("PryValor")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("pry_valor");

                    b.Property<int?>("TseId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tse_id");

                    b.Property<double?>("ValorHora")
                        .HasColumnType("double")
                        .HasColumnName("valor_hora");

                    b.Property<double?>("ValorHoraAdicional")
                        .HasColumnType("double")
                        .HasColumnName("valor_hora_adicional");

                    b.Property<int?>("idEmpresaPrestadora")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_empresa_prestadora");

                    b.Property<int?>("idTipoFacturacion")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_tipo_factura");

                    b.Property<int?>("kamId")
                        .HasColumnType("int(11)")
                        .HasColumnName("pry_kamId");

                    b.HasKey("PryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PryIdCliente" }, "FK_Proyecto_Cliente")
                        .HasDatabaseName("FK_Proyecto_Cliente1");

                    b.HasIndex(new[] { "IdDiaPago" }, "FK_Proyecto_Dia_Pago")
                        .HasDatabaseName("FK_Proyecto_Dia_Pago1");

                    b.HasIndex(new[] { "idEmpresaPrestadora" }, "FK_Proyecto_Empresa_Prestadora")
                        .HasDatabaseName("FK_Proyecto_Empresa_Prestadora1");

                    b.HasIndex(new[] { "EpyId" }, "FK_Proyecto_Estado_Proyecto")
                        .HasDatabaseName("FK_Proyecto_Estado_Proyecto1");

                    b.HasIndex(new[] { "MonId" }, "FK_Proyecto_Moneda")
                        .HasDatabaseName("FK_Proyecto_Moneda1");

                    b.HasIndex(new[] { "PaisId" }, "FK_Proyecto_Pais")
                        .HasDatabaseName("FK_Proyecto_Pais1");

                    b.HasIndex(new[] { "PrpId" }, "FK_Proyecto_Propuesta")
                        .HasDatabaseName("FK_Proyecto_Propuesta1");

                    b.HasIndex(new[] { "TseId" }, "FK_Proyecto_Tipo_Servicio")
                        .HasDatabaseName("FK_Proyecto_Tipo_Servicio1");

                    b.HasIndex(new[] { "IdTipoSoporte" }, "FK_soporte_tipo_soporte");

                    b.ToTable("soporte", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.world.Comuna", b =>
                {
                    b.Property<int>("ComId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("com_id");

                    b.Property<string>("ComNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("com_nombre");

                    b.Property<int?>("PrvId")
                        .HasColumnType("int(11)")
                        .HasColumnName("prv_id");

                    b.HasKey("ComId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PrvId" }, "FK_Comuna_Provincia");

                    b.ToTable("comuna", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.world.DiasFeriados", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Fecha")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int?>("IdPais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pais");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("pais");

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPais" }, "FK_dias_pais");

                    b.ToTable("dias_feriados", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.world.Direccion", b =>
                {
                    b.Property<int>("DirId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("dir_id");

                    b.Property<int?>("CliId")
                        .HasColumnType("int(11)")
                        .HasColumnName("cli_id");

                    b.Property<int?>("ComId")
                        .HasColumnType("int(11)")
                        .HasColumnName("com_id");

                    b.Property<string>("DirBlock")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dir_block");

                    b.Property<string>("DirCalle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dir_calle");

                    b.Property<string>("DirNumero")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dir_numero");

                    b.Property<int?>("DirPrincipal")
                        .HasColumnType("int(11)")
                        .HasColumnName("dir_principal");

                    b.Property<int?>("PerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("per_id");

                    b.Property<int?>("TdiId")
                        .HasColumnType("int(11)")
                        .HasColumnName("tdi_id");

                    b.HasKey("DirId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CliId" }, "FK_Direccion_Cliente");

                    b.HasIndex(new[] { "ComId" }, "FK_Direccion_Comuna");

                    b.HasIndex(new[] { "PerId" }, "FK_Direccion_Persona");

                    b.HasIndex(new[] { "TdiId" }, "FK_Direccion_Tipo_Direccion");

                    b.ToTable("direccion", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.world.Lenguaje", b =>
                {
                    b.Property<int>("LenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("len_id");

                    b.Property<string>("LenNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("len_nombre");

                    b.Property<sbyte?>("LenVigente")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("len_vigente");

                    b.HasKey("LenId")
                        .HasName("PRIMARY");

                    b.ToTable("lenguaje", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.world.Moneda", b =>
                {
                    b.Property<int>("MonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("mon_id");

                    b.Property<string>("MonNombre")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mon_nombre");

                    b.Property<sbyte?>("MonVigente")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("mon_vigente");

                    b.Property<int?>("PaiId")
                        .HasColumnType("int(11)")
                        .HasColumnName("pai_id");

                    b.HasKey("MonId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PaiId" }, "FK_Moneda_Pais");

                    b.ToTable("moneda", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.world.Pais", b =>
                {
                    b.Property<int>("PaiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("pai_id");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("VARCHAR(3)")
                        .HasColumnName("Codigo");

                    b.Property<int>("LenId")
                        .HasColumnType("int(11)")
                        .HasColumnName("len_id");

                    b.Property<string>("PaiNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pai_nombre");

                    b.HasKey("PaiId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LenId" }, "FK_pais_id_Lenguaje");

                    b.ToTable("pais", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.world.Provincia", b =>
                {
                    b.Property<int>("PrvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("prv_id");

                    b.Property<string>("PrvNombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prv_nombre");

                    b.Property<int?>("RegId")
                        .HasColumnType("int(11)")
                        .HasColumnName("reg_id");

                    b.HasKey("PrvId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RegId" }, "FK_Provincia_Region");

                    b.ToTable("provincia", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.world.Region", b =>
                {
                    b.Property<int>("RegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("reg_id");

                    b.Property<int?>("PaiId")
                        .HasColumnType("int(11)")
                        .HasColumnName("pai_id");

                    b.Property<string>("RegNombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("reg_nombre");

                    b.Property<int?>("RegNumero")
                        .HasColumnType("int(11)")
                        .HasColumnName("reg_numero");

                    b.HasKey("RegId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PaiId" }, "FK_Region_pais_id");

                    b.ToTable("region", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.world.TipoDireccion", b =>
                {
                    b.Property<int>("TdiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tdi_id");

                    b.Property<string>("TdiNombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tdi_nombre");

                    b.Property<sbyte?>("TdiVigente")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("tdi_vigente");

                    b.HasKey("TdiId")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_direccion", (string)null);
                });

            modelBuilder.Entity("look.domain.entities.admin.Email", b =>
                {
                    b.HasOne("look.domain.entities.cuentas.Cliente", "Cli")
                        .WithMany()
                        .HasForeignKey("CliId")
                        .HasConstraintName("FK_Email_Cliente");

                    b.HasOne("look.domain.entities.admin.Persona", "Per")
                        .WithMany()
                        .HasForeignKey("PerId")
                        .HasConstraintName("FK_Email_Persona");

                    b.HasOne("look.domain.entities.admin.TipoEmail", "Tem")
                        .WithMany()
                        .HasForeignKey("TemId")
                        .HasConstraintName("FK_Email_Tipo_Email");

                    b.Navigation("Cli");

                    b.Navigation("Per");

                    b.Navigation("Tem");
                });

            modelBuilder.Entity("look.domain.entities.admin.Persona", b =>
                {
                    b.HasOne("look.domain.entities.admin.TipoPersona", "TipoPersona")
                        .WithMany()
                        .HasForeignKey("TpeId")
                        .HasConstraintName("FK_Persona_Tipo_Persona");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("look.domain.entities.admin.ProyectoParticipante", b =>
                {
                    b.HasOne("look.domain.entities.admin.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK_Propuesta_Moneda");

                    b.HasOne("look.domain.entities.admin.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PerId")
                        .HasConstraintName("FK_Propuesta_Estado_Propuesta");

                    b.HasOne("look.domain.entities.admin.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PrfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Proyecto_participantes_Perfil");

                    b.HasOne("look.domain.entities.proyecto.Proyecto", "Proyecto")
                        .WithMany()
                        .HasForeignKey("PryId")
                        .HasConstraintName("FK_Propuesta_Prospecto");

                    b.HasOne("look.domain.entities.proyecto.TarifarioConvenio", "TarifarioConvenio")
                        .WithMany()
                        .HasForeignKey("TarifarioId")
                        .HasConstraintName("FK_Proyecto_participantes_Tarifario");

                    b.Navigation("Car");

                    b.Navigation("Perfil");

                    b.Navigation("Persona");

                    b.Navigation("Proyecto");

                    b.Navigation("TarifarioConvenio");
                });

            modelBuilder.Entity("look.domain.entities.admin.Telefono", b =>
                {
                    b.HasOne("look.domain.entities.cuentas.Cliente", "cliente")
                        .WithMany()
                        .HasForeignKey("cliId")
                        .HasConstraintName("FK_Telefono_Cliente");

                    b.HasOne("look.domain.entities.admin.Persona", "persona")
                        .WithMany()
                        .HasForeignKey("perId")
                        .HasConstraintName("FK_Telefono_Persona");

                    b.HasOne("look.domain.entities.admin.TipoTelefono", "tipoTelefono")
                        .WithMany()
                        .HasForeignKey("tteId")
                        .HasConstraintName("FK_Telefono_Tipo_Telefono");

                    b.Navigation("cliente");

                    b.Navigation("persona");

                    b.Navigation("tipoTelefono");
                });

            modelBuilder.Entity("look.domain.entities.admin.Usuario", b =>
                {
                    b.HasOne("look.domain.entities.admin.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PerId")
                        .HasConstraintName("FK_Usuario_perfil");

                    b.HasOne("look.domain.entities.admin.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PrfId")
                        .HasConstraintName("FK_Usuario_Persona");

                    b.HasOne("look.domain.entities.admin.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .HasConstraintName("FK_Usuario_Rol");

                    b.Navigation("Perfil");

                    b.Navigation("Persona");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("look.domain.entities.cuentas.Cliente", b =>
                {
                    b.HasOne("look.domain.entities.cuentas.EstadoCliente", "EstadoCliente")
                        .WithMany()
                        .HasForeignKey("EclId")
                        .HasConstraintName("FK_ecl_cl");

                    b.HasOne("look.domain.entities.cuentas.Giro", "Giro")
                        .WithMany()
                        .HasForeignKey("GirId")
                        .HasConstraintName("FK_Cliente_Giro");

                    b.HasOne("look.domain.entities.world.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaiId")
                        .IsRequired()
                        .HasConstraintName("FK_Cliente_pais_id");

                    b.HasOne("look.domain.entities.cuentas.SectorComercial", "SectorComercial")
                        .WithMany("Clientes")
                        .HasForeignKey("SecId")
                        .HasConstraintName("FK_Cliente_Sector_Comercial");

                    b.Navigation("EstadoCliente");

                    b.Navigation("Giro");

                    b.Navigation("Pais");

                    b.Navigation("SectorComercial");
                });

            modelBuilder.Entity("look.domain.entities.cuentas.ClientePersona", b =>
                {
                    b.HasOne("look.domain.entities.cuentas.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("CliId")
                        .HasConstraintName("FK_cliente_persona_Cliente");

                    b.HasOne("look.domain.entities.admin.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PerId")
                        .HasConstraintName("FK_cliente_persona_Persona");

                    b.Navigation("Cliente");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("look.domain.entities.factura.DocumentosFactura", b =>
                {
                    b.HasOne("look.domain.entities.factura.FacturaPeriodo", "FacturaPeriodo")
                        .WithMany("DocumentosFactura")
                        .HasForeignKey("IdFactura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_documentos_factura_factura_periodo");

                    b.Navigation("FacturaPeriodo");
                });

            modelBuilder.Entity("look.domain.entities.factura.FacturaAdaptacion", b =>
                {
                    b.HasOne("look.domain.entities.cuentas.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_factura_adaptacion_cliente");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("look.domain.entities.factura.FacturaPeriodo", b =>
                {
                    b.HasOne("look.domain.entities.factura.EstadoFacturaPeriodo", "Estado")
                        .WithMany()
                        .HasForeignKey("IdEstado")
                        .HasConstraintName("FK_factura_periodo_estado");

                    b.HasOne("look.domain.entities.soporte.HorasUtilizadas", "HorasUtilizadas")
                        .WithMany()
                        .HasForeignKey("IdHorasUtilizadas")
                        .HasConstraintName("FK_factura_periodo_horas_utilizadas");

                    b.HasOne("look.domain.entities.proyecto.PeriodoProyecto", "Periodo")
                        .WithMany()
                        .HasForeignKey("IdPeriodo")
                        .HasConstraintName("FK_factura_periodo_periodos");

                    b.HasOne("look.domain.entities.soporte.Soporte", "Soporte")
                        .WithMany()
                        .HasForeignKey("IdSoporteBolsa")
                        .HasConstraintName("FK_factura_soporte");

                    b.HasOne("look.domain.entities.licencia.VentaLicencia", "VentaLicencia")
                        .WithMany()
                        .HasForeignKey("idLicencia")
                        .HasConstraintName("FK_factura_Licencia");

                    b.Navigation("Estado");

                    b.Navigation("HorasUtilizadas");

                    b.Navigation("Periodo");

                    b.Navigation("Soporte");

                    b.Navigation("VentaLicencia");
                });

            modelBuilder.Entity("look.domain.entities.licencia.MarcaLicenciaContacto", b =>
                {
                    b.HasOne("look.domain.entities.licencia.MarcaLicencia", null)
                        .WithMany("MarcaLicenciaContactos")
                        .HasForeignKey("MarcaLicenciaId");
                });

            modelBuilder.Entity("look.domain.entities.licencia.MayoristaLicenciaContacto", b =>
                {
                    b.HasOne("look.domain.entities.licencia.MayoristaLicencia", null)
                        .WithMany("MayoristaLicenciaContactos")
                        .HasForeignKey("MayoristaLicenciaId");
                });

            modelBuilder.Entity("look.domain.entities.licencia.TarifarioVentaLicencia", b =>
                {
                    b.HasOne("look.domain.entities.oportunidad.TipoLicenciaOportunidad", "TipoLicencia")
                        .WithMany()
                        .HasForeignKey("IdLicencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_licencia_tarifario");

                    b.HasOne("look.domain.entities.licencia.MarcaLicencia", "MarcaLicencia")
                        .WithMany()
                        .HasForeignKey("IdMarcaLicencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_marca_licencia");

                    b.HasOne("look.domain.entities.licencia.MayoristaLicencia", "MayoristaLicencia")
                        .WithMany()
                        .HasForeignKey("IdMayoristaLicencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_mayorista_licencia");

                    b.Navigation("MarcaLicencia");

                    b.Navigation("MayoristaLicencia");

                    b.Navigation("TipoLicencia");
                });

            modelBuilder.Entity("look.domain.entities.licencia.VentaLicencia", b =>
                {
                    b.HasOne("look.domain.entities.cuentas.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_venta_licencia_cliente");

                    b.HasOne("look.domain.entities.factura.DiaPagos", "DiaPagos")
                        .WithMany()
                        .HasForeignKey("IdDiaPago")
                        .HasConstraintName("FK_venta_licencia_Dia_Pago");

                    b.HasOne("look.domain.entities.proyecto.EmpresaPrestadora", "EmpresaPrestadora")
                        .WithMany()
                        .HasForeignKey("IdEmpresaPrestadora")
                        .HasConstraintName("FK_oportunidad_Empresa_Prestadora");

                    b.HasOne("look.domain.entities.licencia.EstadoVentaLicencia", "EstadoVentaLicencia")
                        .WithMany()
                        .HasForeignKey("IdEstado")
                        .HasConstraintName("FK_venta_licencia_estado");

                    b.HasOne("look.domain.entities.admin.Persona", "Kam")
                        .WithMany()
                        .HasForeignKey("IdKam")
                        .HasConstraintName("FK_venta_licencia_kam");

                    b.HasOne("look.domain.entities.world.Moneda", "Moneda")
                        .WithMany()
                        .HasForeignKey("IdMoneda")
                        .HasConstraintName("FK_venta_licencia_moneda");

                    b.HasOne("look.domain.entities.world.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("IdPais")
                        .HasConstraintName("FK_venta_licencia_pais");

                    b.Navigation("Cliente");

                    b.Navigation("DiaPagos");

                    b.Navigation("EmpresaPrestadora");

                    b.Navigation("EstadoVentaLicencia");

                    b.Navigation("Kam");

                    b.Navigation("Moneda");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("look.domain.entities.oportunidad.DocumentoOportunidad", b =>
                {
                    b.HasOne("look.domain.entities.oportunidad.Oportunidad", "Oportunidad")
                        .WithMany("DocumentosOportunidad")
                        .HasForeignKey("IdOportunidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_documento_oportunidad");

                    b.Navigation("Oportunidad");
                });

            modelBuilder.Entity("look.domain.entities.oportunidad.Oportunidad", b =>
                {
                    b.HasOne("look.domain.entities.cuentas.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_oportunidad_Cliente");

                    b.HasOne("look.domain.entities.proyecto.EmpresaPrestadora", "EmpresaPrestadora")
                        .WithMany()
                        .HasForeignKey("IdEmpresaPrestadora")
                        .HasConstraintName("FK_oportunidad_Empresa_Prestadora");

                    b.HasOne("look.domain.entities.oportunidad.EstadoOportunidad", "EstadoOportunidad")
                        .WithMany()
                        .HasForeignKey("IdEstadoOportunidad")
                        .HasConstraintName("FK_Estado_Oportunidad");

                    b.HasOne("look.domain.entities.admin.Persona", "PersonaKam")
                        .WithMany()
                        .HasForeignKey("IdKam")
                        .HasConstraintName("FK_oportunidad_persona_kam");

                    b.HasOne("look.domain.entities.world.Moneda", "Moneda")
                        .WithMany()
                        .HasForeignKey("IdMoneda")
                        .HasConstraintName("FK_oportunidad_Moneda");

                    b.HasOne("look.domain.entities.world.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("IdPais")
                        .HasConstraintName("FK_oportunidad_Pais");

                    b.HasOne("look.domain.entities.oportunidad.TipoOportunidad", "TipoOportunidad")
                        .WithMany()
                        .HasForeignKey("IdTipoOportunidad")
                        .HasConstraintName("FK_oportunidad_tipo_oportunida");

                    b.Navigation("Cliente");

                    b.Navigation("EmpresaPrestadora");

                    b.Navigation("EstadoOportunidad");

                    b.Navigation("Moneda");

                    b.Navigation("Pais");

                    b.Navigation("PersonaKam");

                    b.Navigation("TipoOportunidad");
                });

            modelBuilder.Entity("look.domain.entities.prospecto.Empresa", b =>
                {
                    b.HasOne("look.domain.entities.prospecto.Industria", "Industria")
                        .WithMany("Empresas")
                        .HasForeignKey("IdIndustria")
                        .HasConstraintName("FK_empresa_industria");

                    b.Navigation("Industria");
                });

            modelBuilder.Entity("look.domain.entities.prospecto.Prospecto", b =>
                {
                    b.HasOne("look.domain.entities.prospecto.ContactoProspecto", "ContactoProspecto")
                        .WithMany("Prospectos")
                        .HasForeignKey("IdContactoProspecto")
                        .HasConstraintName("FK_prospecto_contacto_prospecto");

                    b.HasOne("look.domain.entities.prospecto.Empresa", "Empresa")
                        .WithMany("Prospectos")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("FK_prospecto_empresa");

                    b.HasOne("look.domain.entities.admin.Persona", "Kam")
                        .WithMany()
                        .HasForeignKey("IdKam")
                        .HasConstraintName("FK_prospecto_kam");

                    b.HasOne("look.domain.entities.prospecto.EstadoProspecto", "EstadoProspecto")
                        .WithMany("Prospectos")
                        .HasForeignKey("idEstadoProspecto")
                        .HasConstraintName("FK_prospecto_estado_prospecto");

                    b.Navigation("ContactoProspecto");

                    b.Navigation("Empresa");

                    b.Navigation("EstadoProspecto");

                    b.Navigation("Kam");
                });

            modelBuilder.Entity("look.domain.entities.proyecto.Documento", b =>
                {
                    b.HasOne("look.domain.entities.cuentas.Cliente", "DocCli")
                        .WithMany()
                        .HasForeignKey("DocIdCliente")
                        .HasConstraintName("FK_Documento_Cliente");

                    b.HasOne("look.domain.entities.proyecto.TipoDocumento", "TipoDoc")
                        .WithMany()
                        .HasForeignKey("TdoId")
                        .HasConstraintName("FK_Documento_Tipo_Documento");

                    b.Navigation("DocCli");

                    b.Navigation("TipoDoc");
                });

            modelBuilder.Entity("look.domain.entities.proyecto.Novedades", b =>
                {
                    b.HasOne("look.domain.entities.admin.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("IdPerfil")
                        .HasConstraintName("FK_proyecto_perfil");

                    b.HasOne("look.domain.entities.proyecto.TipoNovedades", "TipoNovedades")
                        .WithMany()
                        .HasForeignKey("IdTipoNovedad")
                        .HasConstraintName("FK_proyecto_tipo_novedad");

                    b.HasOne("look.domain.entities.admin.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("idPersona")
                        .HasConstraintName("FK_proyecto_persona");

                    b.HasOne("look.domain.entities.proyecto.Proyecto", "Proyecto")
                        .WithMany()
                        .HasForeignKey("idProyecto")
                        .HasConstraintName("FK_proyecto_proyecto");

                    b.Navigation("Perfil");

                    b.Navigation("Persona");

                    b.Navigation("Proyecto");

                    b.Navigation("TipoNovedades");
                });

            modelBuilder.Entity("look.domain.entities.proyecto.PeriodoProfesionales", b =>
                {
                    b.HasOne("look.domain.entities.admin.ProyectoParticipante", "Participante")
                        .WithMany()
                        .HasForeignKey("IdParticipante")
                        .HasConstraintName("FK_periodo_profesionales_proyecto_partipante");

                    b.HasOne("look.domain.entities.proyecto.PeriodoProyecto", "Periodo")
                        .WithMany()
                        .HasForeignKey("IdPeriodo")
                        .HasConstraintName("FK_periodo_profesionales_periodo");

                    b.Navigation("Participante");

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("look.domain.entities.proyecto.PeriodoProyecto", b =>
                {
                    b.HasOne("look.domain.entities.proyecto.Proyecto", "Proyecto")
                        .WithMany()
                        .HasForeignKey("PryId")
                        .HasConstraintName("fk_periodos_proyecto_proyecto");

                    b.Navigation("Proyecto");
                });

            modelBuilder.Entity("look.domain.entities.proyecto.Propuesta", b =>
                {
                    b.HasOne("look.domain.entities.proyecto.EstadoPropuesta", "EsPro")
                        .WithMany()
                        .HasForeignKey("EppId")
                        .HasConstraintName("FK_Propuesta_Estado_Propuesta");

                    b.HasOne("look.domain.entities.world.Moneda", "Mon")
                        .WithMany()
                        .HasForeignKey("MonId")
                        .HasConstraintName("FK_Propuesta_Moneda");

                    b.HasOne("look.domain.entities.proyecto.TipoServicio", "TipSer")
                        .WithMany()
                        .HasForeignKey("TseId")
                        .HasConstraintName("FK_Propuesta_Tipo_Servicio");

                    b.Navigation("EsPro");

                    b.Navigation("Mon");

                    b.Navigation("TipSer");
                });

            modelBuilder.Entity("look.domain.entities.proyecto.Proyecto", b =>
                {
                    b.HasOne("look.domain.entities.proyecto.EstadoProyecto", "EsProy")
                        .WithMany()
                        .HasForeignKey("EpyId")
                        .HasConstraintName("FK_Proyecto_Estado_Proyecto");

                    b.HasOne("look.domain.entities.factura.DiaPagos", "DiaPagos")
                        .WithMany()
                        .HasForeignKey("IdDiaPago")
                        .HasConstraintName("FK_Proyecto_Dia_Pago");

                    b.HasOne("look.domain.entities.world.Moneda", "Mon")
                        .WithMany()
                        .HasForeignKey("MonId")
                        .HasConstraintName("FK_Proyecto_Moneda");

                    b.HasOne("look.domain.entities.world.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId")
                        .HasConstraintName("FK_Proyecto_Pais");

                    b.HasOne("look.domain.entities.cuentas.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("PryIdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Proyecto_Cliente");

                    b.HasOne("look.domain.entities.proyecto.TipoServicio", "TipoServicio")
                        .WithMany()
                        .HasForeignKey("TseId")
                        .HasConstraintName("FK_Proyecto_Tipo_Servicio");

                    b.HasOne("look.domain.entities.proyecto.EmpresaPrestadora", "EmpresaPrestadora")
                        .WithMany()
                        .HasForeignKey("idEmpresaPrestadora")
                        .HasConstraintName("FK_Proyecto_Empresa_Prestadora");

                    b.Navigation("Cliente");

                    b.Navigation("DiaPagos");

                    b.Navigation("EmpresaPrestadora");

                    b.Navigation("EsProy");

                    b.Navigation("Mon");

                    b.Navigation("Pais");

                    b.Navigation("TipoServicio");
                });

            modelBuilder.Entity("look.domain.entities.proyecto.ProyectoDocumento", b =>
                {
                    b.HasOne("look.domain.entities.proyecto.Documento", "Documento")
                        .WithMany()
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Propuesta_Moneda");

                    b.HasOne("look.domain.entities.proyecto.Proyecto", "Proyecto")
                        .WithMany()
                        .HasForeignKey("PryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Propuesta_Estado_Propuesta");

                    b.HasOne("look.domain.entities.proyecto.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TdoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Propuesta_Prospecto");

                    b.Navigation("Documento");

                    b.Navigation("Proyecto");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("look.domain.entities.proyecto.TarifarioConvenio", b =>
                {
                    b.HasOne("look.domain.entities.proyecto.Proyecto", "Proyecto")
                        .WithMany()
                        .HasForeignKey("PRpId")
                        .HasConstraintName("FK_tarifario_convenido_proyecto");

                    b.HasOne("look.domain.entities.world.Moneda", "Moneda")
                        .WithMany()
                        .HasForeignKey("TcMoneda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tarifario_convenido_moneda");

                    b.HasOne("look.domain.entities.admin.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("TcPerfilAsignado")
                        .HasConstraintName("FK_tarifario_convenido_perfil");

                    b.Navigation("Moneda");

                    b.Navigation("Perfil");

                    b.Navigation("Proyecto");
                });

            modelBuilder.Entity("look.domain.entities.soporte.DocumentosSoporte", b =>
                {
                    b.HasOne("look.domain.entities.soporte.Soporte", "Soporte")
                        .WithMany("DocumentosSoporte")
                        .HasForeignKey("IdSoporte")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_documentos_soporte");

                    b.Navigation("Soporte");
                });

            modelBuilder.Entity("look.domain.entities.soporte.HorasUtilizadas", b =>
                {
                    b.HasOne("look.domain.entities.soporte.Soporte", "Soporte")
                        .WithMany()
                        .HasForeignKey("IdSoporte")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Soporte");
                });

            modelBuilder.Entity("look.domain.entities.soporte.Soporte", b =>
                {
                    b.HasOne("look.domain.entities.proyecto.EstadoProyecto", "EsProy")
                        .WithMany()
                        .HasForeignKey("EpyId")
                        .HasConstraintName("FK_Proyecto_Estado_Proyecto");

                    b.HasOne("look.domain.entities.factura.DiaPagos", "DiaPagos")
                        .WithMany()
                        .HasForeignKey("IdDiaPago")
                        .HasConstraintName("FK_Proyecto_Dia_Pago");

                    b.HasOne("look.domain.entities.world.Moneda", "Mon")
                        .WithMany()
                        .HasForeignKey("MonId")
                        .HasConstraintName("FK_Proyecto_Moneda");

                    b.HasOne("look.domain.entities.world.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId")
                        .HasConstraintName("FK_Proyecto_Pais");

                    b.HasOne("look.domain.entities.cuentas.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("PryIdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Proyecto_Cliente");

                    b.HasOne("look.domain.entities.proyecto.TipoServicio", "TipoServicio")
                        .WithMany()
                        .HasForeignKey("TseId")
                        .HasConstraintName("FK_Proyecto_Tipo_Servicio");

                    b.HasOne("look.domain.entities.proyecto.EmpresaPrestadora", "EmpresaPrestadora")
                        .WithMany()
                        .HasForeignKey("idEmpresaPrestadora")
                        .HasConstraintName("FK_Proyecto_Empresa_Prestadora");

                    b.Navigation("Cliente");

                    b.Navigation("DiaPagos");

                    b.Navigation("EmpresaPrestadora");

                    b.Navigation("EsProy");

                    b.Navigation("Mon");

                    b.Navigation("Pais");

                    b.Navigation("TipoServicio");
                });

            modelBuilder.Entity("look.domain.entities.world.Comuna", b =>
                {
                    b.HasOne("look.domain.entities.world.Provincia", "Prv")
                        .WithMany("Comunas")
                        .HasForeignKey("PrvId")
                        .HasConstraintName("FK_Comuna_Provincia");

                    b.Navigation("Prv");
                });

            modelBuilder.Entity("look.domain.entities.world.Direccion", b =>
                {
                    b.HasOne("look.domain.entities.cuentas.Cliente", "Cli")
                        .WithMany()
                        .HasForeignKey("CliId")
                        .HasConstraintName("FK_Direccion_Cliente");

                    b.HasOne("look.domain.entities.world.Comuna", "Com")
                        .WithMany()
                        .HasForeignKey("ComId")
                        .HasConstraintName("FK_Direccion_Comuna");

                    b.HasOne("look.domain.entities.admin.Persona", "Per")
                        .WithMany()
                        .HasForeignKey("PerId")
                        .HasConstraintName("FK_Direccion_Persona");

                    b.HasOne("look.domain.entities.world.TipoDireccion", "Tdi")
                        .WithMany()
                        .HasForeignKey("TdiId")
                        .HasConstraintName("FK_Direccion_Tipo_Direccion");

                    b.Navigation("Cli");

                    b.Navigation("Com");

                    b.Navigation("Per");

                    b.Navigation("Tdi");
                });

            modelBuilder.Entity("look.domain.entities.world.Moneda", b =>
                {
                    b.HasOne("look.domain.entities.world.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaiId")
                        .HasConstraintName("FK_Moneda_Pais");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("look.domain.entities.world.Pais", b =>
                {
                    b.HasOne("look.domain.entities.world.Lenguaje", "Lenguaje")
                        .WithMany()
                        .HasForeignKey("LenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_pais_id_Lenguaje");

                    b.Navigation("Lenguaje");
                });

            modelBuilder.Entity("look.domain.entities.world.Provincia", b =>
                {
                    b.HasOne("look.domain.entities.world.Region", "Reg")
                        .WithMany("Provincia")
                        .HasForeignKey("RegId")
                        .HasConstraintName("FK_Provincia_Region");

                    b.Navigation("Reg");
                });

            modelBuilder.Entity("look.domain.entities.world.Region", b =>
                {
                    b.HasOne("look.domain.entities.world.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaiId")
                        .HasConstraintName("FK_Region_pais_id");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("look.domain.entities.cuentas.SectorComercial", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("look.domain.entities.factura.FacturaPeriodo", b =>
                {
                    b.Navigation("DocumentosFactura");
                });

            modelBuilder.Entity("look.domain.entities.licencia.MarcaLicencia", b =>
                {
                    b.Navigation("MarcaLicenciaContactos");
                });

            modelBuilder.Entity("look.domain.entities.licencia.MayoristaLicencia", b =>
                {
                    b.Navigation("MayoristaLicenciaContactos");
                });

            modelBuilder.Entity("look.domain.entities.oportunidad.Oportunidad", b =>
                {
                    b.Navigation("DocumentosOportunidad");
                });

            modelBuilder.Entity("look.domain.entities.prospecto.ContactoProspecto", b =>
                {
                    b.Navigation("Prospectos");
                });

            modelBuilder.Entity("look.domain.entities.prospecto.Empresa", b =>
                {
                    b.Navigation("Prospectos");
                });

            modelBuilder.Entity("look.domain.entities.prospecto.EstadoProspecto", b =>
                {
                    b.Navigation("Prospectos");
                });

            modelBuilder.Entity("look.domain.entities.prospecto.Industria", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("look.domain.entities.soporte.Soporte", b =>
                {
                    b.Navigation("DocumentosSoporte");
                });

            modelBuilder.Entity("look.domain.entities.world.Provincia", b =>
                {
                    b.Navigation("Comunas");
                });

            modelBuilder.Entity("look.domain.entities.world.Region", b =>
                {
                    b.Navigation("Provincia");
                });
#pragma warning restore 612, 618
        }
    }
}
